{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport matter from \"gray-matter\";\nimport fs from \"fs\";\nimport path from \"path\";\nexport function getPostsFolders() {\n  // Get all posts folders located in `content/posts`\n  const postsFolders = fs.readdirSync(`${process.cwd()}/content/posts`).map(folderName => ({\n    directory: folderName,\n    filename: `${folderName}.md`\n  }));\n  return postsFolders;\n} // Get day in format: Month day, Year. e.g. April 19, 2020\n\nfunction getFormattedDate(date) {\n  const options = {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\"\n  };\n  const formattedDate = date.toLocaleDateString(\"en-US\", options);\n  return formattedDate;\n}\n\nexport function getSortedPosts() {\n  const postFolders = getPostsFolders();\n  const posts = postFolders.map(({\n    filename,\n    directory\n  }) => {\n    // Get raw content from file\n    const markdownWithMetadata = fs.readFileSync(`content/posts/${directory}/${filename}`).toString(); // Parse markdown, get frontmatter data, excerpt and content.\n\n    const {\n      data,\n      excerpt,\n      content\n    } = matter(markdownWithMetadata);\n\n    const frontmatter = _objectSpread(_objectSpread({}, data), {}, {\n      date: getFormattedDate(data.date)\n    }); // Remove .md file extension from post name\n\n\n    const slug = filename.replace(\".md\", \"\");\n    return {\n      slug,\n      frontmatter,\n      excerpt,\n      content\n    };\n  }).sort((a, b) => new Date(b.frontmatter.date) - new Date(a.frontmatter.date));\n  return posts;\n}\nexport function getPostsSlugs() {\n  const postFolders = getPostsFolders();\n  const paths = postFolders.map(({\n    filename\n  }) => ({\n    params: {\n      slug: filename.replace(\".md\", \"\")\n    }\n  }));\n  return paths;\n}\nexport function getPostBySlug(slug) {\n  const posts = getSortedPosts();\n  const postIndex = posts.findIndex(({\n    slug: postSlug\n  }) => postSlug === slug);\n  const {\n    frontmatter,\n    content,\n    excerpt\n  } = posts[postIndex];\n  const previousPost = posts[postIndex + 1];\n  const nextPost = posts[postIndex - 1];\n  return {\n    frontmatter,\n    post: {\n      content,\n      excerpt\n    },\n    previousPost,\n    nextPost\n  };\n}","map":{"version":3,"sources":["/mnt/c/projects/nextjs-starter-blog/utils/posts.js"],"names":["matter","fs","path","getPostsFolders","postsFolders","readdirSync","process","cwd","map","folderName","directory","filename","getFormattedDate","date","options","year","month","day","formattedDate","toLocaleDateString","getSortedPosts","postFolders","posts","markdownWithMetadata","readFileSync","toString","data","excerpt","content","frontmatter","slug","replace","sort","a","b","Date","getPostsSlugs","paths","params","getPostBySlug","postIndex","findIndex","postSlug","previousPost","nextPost","post"],"mappings":"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","sourcesContent":["import matter from \"gray-matter\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nexport function getPostsFolders() {\n  // Get all posts folders located in `content/posts`\n  const postsFolders = fs\n    .readdirSync(`${process.cwd()}/content/posts`)\n    .map((folderName) => ({\n      directory: folderName,\n      filename: `${folderName}.md`,\n    }));\n\n  return postsFolders;\n}\n\n// Get day in format: Month day, Year. e.g. April 19, 2020\nfunction getFormattedDate(date) {\n  const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n  const formattedDate = date.toLocaleDateString(\"en-US\", options);\n\n  return formattedDate;\n}\n\nexport function getSortedPosts() {\n  const postFolders = getPostsFolders();\n\n  const posts = postFolders\n    .map(({ filename, directory }) => {\n      // Get raw content from file\n      const markdownWithMetadata = fs\n        .readFileSync(`content/posts/${directory}/${filename}`)\n        .toString();\n\n      // Parse markdown, get frontmatter data, excerpt and content.\n      const { data, excerpt, content } = matter(markdownWithMetadata);\n\n      const frontmatter = {\n        ...data,\n        date: getFormattedDate(data.date),\n      };\n\n      // Remove .md file extension from post name\n      const slug = filename.replace(\".md\", \"\");\n\n      return {\n        slug,\n        frontmatter,\n        excerpt,\n        content,\n      };\n    })\n    .sort(\n      (a, b) => new Date(b.frontmatter.date) - new Date(a.frontmatter.date)\n    );\n\n  return posts;\n}\n\nexport function getPostsSlugs() {\n  const postFolders = getPostsFolders();\n\n  const paths = postFolders.map(({ filename }) => ({\n    params: {\n      slug: filename.replace(\".md\", \"\"),\n    },\n  }));\n\n  return paths;\n}\n\nexport function getPostBySlug(slug) {\n  const posts = getSortedPosts();\n\n  const postIndex = posts.findIndex(({ slug: postSlug }) => postSlug === slug);\n\n  const { frontmatter, content, excerpt } = posts[postIndex];\n\n  const previousPost = posts[postIndex + 1];\n  const nextPost = posts[postIndex - 1];\n\n  return { frontmatter, post: { content, excerpt }, previousPost, nextPost };\n}\n"]},"metadata":{},"sourceType":"module"}