{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport matter from \"gray-matter\";\nimport fs from \"fs\";\nimport path from \"path\";\nexport function getPostsFolders() {\n  // Get all posts folders located in `content/posts`\n  const postsFolders = fs.readdirSync(`${process.cwd()}/content/posts`).map(folderName => ({\n    directory: folderName,\n    filename: `${folderName}.md`\n  }));\n  return postsFolders;\n} // Get day in format: Month day, Year. e.g. April 19, 2020\n\nfunction getFormattedDate(date) {\n  const options = {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\"\n  };\n  const formattedDate = date.toLocaleDateString(\"en-US\", options);\n  return formattedDate;\n}\n\nexport function getSortedPosts() {\n  const postFolders = getPostsFolders();\n  const posts = postFolders.map(({\n    filename,\n    directory\n  }) => {\n    // Get raw content from file\n    const markdownWithMetadata = fs.readFileSync(`content/posts/${directory}/${filename}`).toString(); // Parse markdown, get frontmatter data, excerpt and content.\n\n    const {\n      data,\n      excerpt,\n      content\n    } = matter(markdownWithMetadata);\n\n    const frontmatter = _objectSpread(_objectSpread({}, data), {}, {\n      date: getFormattedDate(data.date)\n    }); // Remove .md file extension from post name\n\n\n    const slug = filename.replace(\".md\", \"\");\n    return {\n      slug,\n      frontmatter,\n      excerpt,\n      content\n    };\n  }).sort((a, b) => new Date(b.frontmatter.date) - new Date(a.frontmatter.date));\n  return posts;\n}\nexport function getPostsSlugs() {\n  const postFolders = getPostsFolders();\n  const paths = postFolders.map(({\n    filename\n  }) => ({\n    params: {\n      slug: filename.replace(\".md\", \"\")\n    }\n  }));\n  return paths;\n}\nexport function getPostBySlug(slug) {\n  const posts = getSortedPosts();\n  const postIndex = posts.findIndex(({\n    slug: postSlug\n  }) => postSlug === slug);\n  const {\n    frontmatter,\n    content,\n    excerpt\n  } = posts[postIndex];\n  const previousPost = posts[postIndex + 1];\n  const nextPost = posts[postIndex - 1];\n  return {\n    frontmatter,\n    post: {\n      content,\n      excerpt\n    },\n    previousPost,\n    nextPost\n  };\n}","map":null,"metadata":{},"sourceType":"module"}